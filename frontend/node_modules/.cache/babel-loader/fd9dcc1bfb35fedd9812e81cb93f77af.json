{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertReactSVGDOMProperty = convertReactSVGDOMProperty;\nexports.startsWith = startsWith;\nexports.serializeAttrs = serializeAttrs;\nexports.getSVGFromSource = getSVGFromSource;\nexports.extractSVGProps = extractSVGProps; // Transform DOM prop/attr names applicable to `<svg>` element but react-limited\n\nfunction convertReactSVGDOMProperty(str) {\n  return str.replace(/[-|:]([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n}\n\nfunction startsWith(str, substring) {\n  return str.indexOf(substring) === 0;\n}\n\nvar DataPropPrefix = 'data-'; // Serialize `Attr` objects in `NamedNodeMap`\n\nfunction serializeAttrs(map) {\n  var ret = {};\n\n  for (var prop, i = 0; i < map.length; i++) {\n    var key = map[i].name;\n\n    if (key == \"class\") {\n      prop = \"className\";\n    } else if (!startsWith(key, DataPropPrefix)) {\n      prop = convertReactSVGDOMProperty(key);\n    } else {\n      prop = key;\n    }\n\n    ret[prop] = map[i].value;\n  }\n\n  return ret;\n}\n\nfunction getSVGFromSource(src) {\n  var svgContainer = document.createElement('div');\n  svgContainer.innerHTML = src;\n  var svg = svgContainer.firstElementChild;\n  svg.remove ? svg.remove() : svgContainer.removeChild(svg); // deref from parent element\n\n  return svg;\n} // get <svg /> element props\n\n\nfunction extractSVGProps(src) {\n  var map = getSVGFromSource(src).attributes;\n  return map.length > 0 ? serializeAttrs(map) : null;\n}","map":{"version":3,"sources":["/Users/hubbabubb/Documents/codecool/imagenation/frontend/node_modules/svg-inline-react/lib/util.js"],"names":["Object","defineProperty","exports","value","convertReactSVGDOMProperty","startsWith","serializeAttrs","getSVGFromSource","extractSVGProps","str","replace","g","toUpperCase","substring","indexOf","DataPropPrefix","map","ret","prop","i","length","key","name","src","svgContainer","document","createElement","innerHTML","svg","firstElementChild","remove","removeChild","attributes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,0BAAR,GAAqCA,0BAArC;AACAF,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACAH,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACAJ,OAAO,CAACK,gBAAR,GAA2BA,gBAA3B;AACAL,OAAO,CAACM,eAAR,GAA0BA,eAA1B,C,CACA;;AAEA,SAASJ,0BAAT,CAAoCK,GAApC,EAAyC;AACrC,SAAOA,GAAG,CAACC,OAAJ,CAAY,eAAZ,EAA6B,UAAUC,CAAV,EAAa;AAC7C,WAAOA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAP;AACH,GAFM,CAAP;AAGH;;AAED,SAASP,UAAT,CAAoBI,GAApB,EAAyBI,SAAzB,EAAoC;AAChC,SAAOJ,GAAG,CAACK,OAAJ,CAAYD,SAAZ,MAA2B,CAAlC;AACH;;AAED,IAAIE,cAAc,GAAG,OAArB,C,CACA;;AACA,SAAST,cAAT,CAAwBU,GAAxB,EAA6B;AACzB,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,IAAJ,EAAUC,CAAC,GAAG,CAAnB,EAAsBA,CAAC,GAAGH,GAAG,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,GAAG,GAAGL,GAAG,CAACG,CAAD,CAAH,CAAOG,IAAjB;;AACA,QAAID,GAAG,IAAI,OAAX,EAAoB;AAChBH,MAAAA,IAAI,GAAG,WAAP;AACH,KAFD,MAEO,IAAI,CAACb,UAAU,CAACgB,GAAD,EAAMN,cAAN,CAAf,EAAsC;AACzCG,MAAAA,IAAI,GAAGd,0BAA0B,CAACiB,GAAD,CAAjC;AACH,KAFM,MAEA;AACHH,MAAAA,IAAI,GAAGG,GAAP;AACH;;AAEDJ,IAAAA,GAAG,CAACC,IAAD,CAAH,GAAYF,GAAG,CAACG,CAAD,CAAH,CAAOhB,KAAnB;AACH;;AACD,SAAOc,GAAP;AACH;;AAED,SAASV,gBAAT,CAA0BgB,GAA1B,EAA+B;AAC3B,MAAIC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAnB;AACAF,EAAAA,YAAY,CAACG,SAAb,GAAyBJ,GAAzB;AACA,MAAIK,GAAG,GAAGJ,YAAY,CAACK,iBAAvB;AACAD,EAAAA,GAAG,CAACE,MAAJ,GAAaF,GAAG,CAACE,MAAJ,EAAb,GAA4BN,YAAY,CAACO,WAAb,CAAyBH,GAAzB,CAA5B,CAJ2B,CAIgC;;AAC3D,SAAOA,GAAP;AACH,C,CAED;;;AACA,SAASpB,eAAT,CAAyBe,GAAzB,EAA8B;AAC1B,MAAIP,GAAG,GAAGT,gBAAgB,CAACgB,GAAD,CAAhB,CAAsBS,UAAhC;AACA,SAAOhB,GAAG,CAACI,MAAJ,GAAa,CAAb,GAAiBd,cAAc,CAACU,GAAD,CAA/B,GAAuC,IAA9C;AACH","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.convertReactSVGDOMProperty = convertReactSVGDOMProperty;\nexports.startsWith = startsWith;\nexports.serializeAttrs = serializeAttrs;\nexports.getSVGFromSource = getSVGFromSource;\nexports.extractSVGProps = extractSVGProps;\n// Transform DOM prop/attr names applicable to `<svg>` element but react-limited\n\nfunction convertReactSVGDOMProperty(str) {\n    return str.replace(/[-|:]([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n    });\n}\n\nfunction startsWith(str, substring) {\n    return str.indexOf(substring) === 0;\n}\n\nvar DataPropPrefix = 'data-';\n// Serialize `Attr` objects in `NamedNodeMap`\nfunction serializeAttrs(map) {\n    var ret = {};\n    for (var prop, i = 0; i < map.length; i++) {\n        var key = map[i].name;\n        if (key == \"class\") {\n            prop = \"className\";\n        } else if (!startsWith(key, DataPropPrefix)) {\n            prop = convertReactSVGDOMProperty(key);\n        } else {\n            prop = key;\n        }\n\n        ret[prop] = map[i].value;\n    }\n    return ret;\n}\n\nfunction getSVGFromSource(src) {\n    var svgContainer = document.createElement('div');\n    svgContainer.innerHTML = src;\n    var svg = svgContainer.firstElementChild;\n    svg.remove ? svg.remove() : svgContainer.removeChild(svg); // deref from parent element\n    return svg;\n}\n\n// get <svg /> element props\nfunction extractSVGProps(src) {\n    var map = getSVGFromSource(src).attributes;\n    return map.length > 0 ? serializeAttrs(map) : null;\n}"]},"metadata":{},"sourceType":"script"}